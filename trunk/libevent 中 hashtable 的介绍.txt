libevent 中 hashtable 的介绍

在libevent 中用宏定义了一个hashtable,你可以用它方便的定义一个类型安全的hashtable,我们尝试做下面一个hashtable,有下面两个类型.

struct BTMessage
{
   int x;
   int y;
   char* message;
   char* description;
};

我们将body对象保存在 hashtable 中,并以 x和y同时作为主键来快速访问 body 对象, 为了达到这个目的,我们需要完成下面的事情

1.由于 hashtable 是侵入式的需要重新定义BTMessage

struct BTMessage
{
   HT_ENTRY(BTMessage) key;
	
   int x;
   int y;
   char* message;
   char* description;
};


2.定义如何产生hash值

unsigned hashkey(struct BTMessage *e)
{
    // 非常不高效,但作为例子够了
	return e->x * 10 + e->y;
}

2.定义key的如何判断相等
int eqkey(struct BTMessage *e1, struct BTMessage *e2)
{
	return e1->x == e2->x && e1->y == e2->y;
}



3 定义保存body对象的hashtable的类型
HT_HEAD(BTMessageMap, BTMessage);
HT_PROTOTYPE(BTMessageMap, BTMessage, key, hashkey, eqkey);
HT_GENERATE(BTMessageMap, BTMessage, key, hashkey, eqkey,
			0.5, malloc, realloc, free);
			
4.如何使用呢

   // 定义map变量
	BTMessageMap map;
	// 初始化变量
	HT_INIT(BTMessageMap, &map);
	
	// 插入值
	HT_INSERT( BTMessageMap, &map, new BTMessage(1,2,"a"));
	HT_INSERT( BTMessageMap, &map, new BTMessage(1,3,"b"));
	HT_INSERT( BTMessageMap, &map, new BTMessage(1,4,"c"));
	HT_INSERT( BTMessageMap, &map, new BTMessage(1,5,"d"));
	HT_INSERT( BTMessageMap, &map, new BTMessage(1,6,"e"));
	HT_INSERT( BTMessageMap, &map, new BTMessage(1,7,"f"));

    // 查找原来的值
    BTMessage* m = HT_FIND(BTMessageMap,&map, new BTMessage(1,2) );
    BTMessage* m2 = HT_FIND(BTMessageMap,&map, new BTMessage(1,4) );

4,函数
 HT_INIT(name, head) 
 HT_CLEAR(name, head) 
 HT_FIND(name, head, elm)
 HT_INSERT(name, head, elm)
 HT_REPLACE(name, head, elm) 
 HT_REMOVE(name, head, elm) 
 HT_START(name, head)
 HT_NEXT(name, head, elm) 
 HT_NEXT_RMV(name, head, elm)
 
