<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentIsAllowedOnlyOnceAndWasAlreadyGiven" xml:space="preserve">
    <value>不能在 {1} 处添加参数 '{0}' (参数只能出现一次，便已经存在了 {2}).</value>
  </data>
  <data name="Arguments" xml:space="preserve">
    <value>Arguments</value>
  </data>
  <data name="ArgumentsMustHaveMinimumLength" xml:space="preserve">
    <value>不能处理参数[ '{0}' , position = {1} ](参数至少有2个字节).</value>
  </data>
  <data name="ArgumentsMustHavePrefix" xml:space="preserve">
    <value>不能处理参数[ '{0}' , position = {1} ] (参数必须有一个前缀 '{2}', '{3}' 或 '{4}').</value>
  </data>
  <data name="ArgumentSuccessfullyParsed" xml:space="preserve">
    <value>参数{1} 的 {0} 成功解析.</value>
  </data>
  <data name="AttribteIsRequired" xml:space="preserve">
    <value>属性 '{0}' 是必须的</value>
  </data>
  <data name="CommandLineParseResults" xml:space="preserve">
    <value>命令行分析结果</value>
  </data>
  <data name="DefaultCommands" xml:space="preserve">
    <value>缺省命令</value>
  </data>
  <data name="DoNotMatchAnyArgument" xml:space="preserve">
    <value>不能处理[ '{0}', position= {1}] (没有匹配任何已知的参数).</value>
  </data>
  <data name="ErrorLoadingSchema" xml:space="preserve">
    <value>载入 schema 发生错误: </value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="FailedToParseArgument" xml:space="preserve">
    <value>分析参数[ position = '{0}']发生错误.(参数为空)</value>
  </data>
  <data name="FailedToReadNonOptionalElement" xml:space="preserve">
    <value>读命名空问 {1} 下的 {0} 必选节点时发生错误.</value>
  </data>
  <data name="FileVersionFormat" xml:space="preserve">
    <value># 格式: 文件 (dll|exe), 版本, 机器, PEKinds, 创建</value>
  </data>
  <data name="FileVersionInfoOfFilesInDirectory" xml:space="preserve">
    <value># 目录 {1} 中的文件 {0} 的版本信息 {1}</value>
  </data>
  <data name="IgnoringArgument" xml:space="preserve">
    <value>忽略参数[ '{0}' , position = {1}] (参数不允许出现多次，它已经在 {2} 出现).</value>
  </data>
  <data name="KeyNotExistInObjectCache" xml:space="preserve">
    <value>Key {0} 不存在</value>
  </data>
  <data name="MultipleArgumentsWithIdentifierFound" xml:space="preserve">
    <value>只能有一个参数 (找到多个 '{0}' 参数).</value>
  </data>
  <data name="NoArgumentsGiven" xml:space="preserve">
    <value>没有参数.</value>
  </data>
  <data name="ParseErrorDetected" xml:space="preserve">
    <value>{0} 个解析错误.</value>
  </data>
  <data name="RequiredAttributeIsMissingOrEmpty" xml:space="preserve">
    <value>必选属性 '{0}' 错误或为空.</value>
  </data>
  <data name="UknownIdentifier" xml:space="preserve">
    <value>无法取得参数 ('{0}' 不是一个有效的Identifier).</value>
  </data>
</root>